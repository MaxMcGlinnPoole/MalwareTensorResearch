import sys
import json
import csv
home_directory = "/Users/MaxBox1/GitHub/MalwareTensorResearch/python code/JSON_CSV_Convert/"


class Malware:
    def __init__(self):
        self.DllCharacteristics = []
        self.FILE_HEADER = []
        self.Parsing_Warnings = []
        self.Directories = []
        self.DOS_HEADER = []
        self.OPTIONAL_HEADER = []
        self.NT_HEADERS = []
        self.Flags = []
        self.PE_Sections = []
        self.max_length = -1

    def create_from_json(self, file):
        json_file = open(home_directory + file).read()
        json_file = json.loads(json_file)

        for key in json_file:
            new_array = iterate_key(json_file, key)
            print(key)
            if key == 'DllCharacteristics':
                self.DllCharacteristics = new_array
            elif key == 'FILE_HEADER':
                self.FILE_HEADER = new_array
            elif key == 'Parsing Warnings':
                self.Parsing_Warnings = new_array
            elif key == 'Directories':
                self.Directories = new_array
            elif key == 'DOS_HEADER':
                self.DOS_HEADER = new_array
            elif key == 'OPTIONAL_HEADER':
                self.OPTIONAL_HEADER = new_array
            elif key == 'NT_HEADERS':
                self.NT_HEADERS = new_array
            elif key == 'Flags':
                self.Flags = new_array
            elif key == 'PE Sections':
                self.PE_Sections = new_array
            if len(new_array) > self.max_length:
                self.max_length = len(new_array)
        print(self.FILE_HEADER)



def get_file_names():
    file_names = sys.argv[1:]
    return file_names


def iterate_key(json_file, goal_key, values=[]):
    values.append(goal_key)
    if not isinstance(json_file[goal_key], dict):
        return json_file[goal_key]
    for key in json_file[goal_key]:
        values.append(iterate_key(json_file[goal_key], key))
    if goal_key == values[0]:
        # Only return the values array when we have gone back to the top of the recursion
        print(values)
        return values


def convert_to_csv(file):
    my_mal = Malware()
    my_mal.create_from_json(file)

    file_ending_offset = len(".json")
    csv_file = file[0:len(file)-file_ending_offset] + ".csv"
    with open(csv_file, 'w') as csvmal:
        malwriter = csv.writer(csvmal)
        malwriter.writerow(['DllCharacteristics', 'Parsing Warnings', 'FILE_HEADER', 'Directories', 'DOS_HEADER',
                            'OPTIONAL_HEADER', 'NT_HEADERS', 'Flags', 'PE_Sections'])


def convert_to_json(file):
    return


def main():
    files = get_file_names()
    for file in files:
        if file.endswith('.json'):
            convert_to_csv(file)
        elif file.endswith('.csv'):
            convert_to_json(file)
        else:
            print("Unrecgonized file extension: ", file)
main()
