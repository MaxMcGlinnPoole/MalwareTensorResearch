%Would probably be better to find the uniqueness of that ngram in the
%tensor

%This loads the results from the ngramtensor.py script into matlab and does some basic visualization with it
Lab1_1gram = csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/Lab01-01.txtngram_one.csv');
Lab1_2gram =  csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/Lab01-01.txtngram_two.csv');
Lab2_1gram = csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/Lab01-02.txtngram_one.csv');
Lab2_2gram = csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/Lab01-02.txtngram_two.csv');
average_1gram = csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/averagengram_one.csv');
average_2gram = csvread('/Users/MaxBox1/GitHub/MalwareTensorResearch/testData/averagengram_two.csv');
%Turn 2gram into 4 dimensional matlab array
average_2gram = reshape(average_2gram, [16,16,16,16]);
%append 1gram to the end of the 4 dimensional matlab array
%Term frequency invert document frequency

average_2gram(1,:,17,:) = average_1gram;
U = cpd(average_2gram, 4);
T = cpdgen(U);

%Turn 2gram into 4 dimensional matlab array
Lab2_2gram = reshape(Lab2_2gram, [16,16,16,16]);
%append 1gram to the end of the 4 dimensional matlab array
Lab2_2gram(1,:,17,:) = Lab1_1gram;
U2 = cpd(Lab2_2gram, 4);
T2 = cpdgen(U2);

h = figure(1); visualize(T);
h2 = figure(2); visualize(T2);
