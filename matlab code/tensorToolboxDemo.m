%Create a 3-way tensor
tens_mat_3way = ones(3,4,6);
tens_mat_3way(1,4,5) = 5;
tens_3way = tensor(tens_mat_3way);
%You can also reshape the tensor
tens_3way_reshape = tensor(tens_mat_3way, [4,3,6]);

%Please note that the whos command does not report the correct size of 1D
%objects


%Create a random tensor
X = tenrand([4 5 2]);
%The data of the tensor
X.data
%The size of the tensor
X.size
%The number of dimensions of a tensor
ndims(X)
%You can use end for the last array index
X(end, end, end)
%Make a copy of the tensor
Y = tensor(X.data, X.size);

%tenfun applies a specified function to a number of tensors.

X_minus1 = tenfun(@(x) (x-1), X);

%Creating a sparse tensor
%We first define where the tensor will be nonzero
%Lets say this tensor is superdiagonal
subs = [1,1,1;2,2,2;3,3,3];
%Then define the values on each subscript
vals = [2; 4; 8];
X = sptensor(subs,vals);
%You can also specify the exact size
X = sptensor(subs,vals,[3 4 5]);
%We can convert this to a full (dense) tensor
Y = tensor(X);
%You can also do the reverse
X = sptensor(Y);
%Find the number of nonzeros
nnz(X)
%Apply a function to every nonzero of a sparse tensor
Z = elemfun(X, @(x) x-1);

%Tucker is a decomposition into a core tensor G and 3 factor matrices,
%A, B, C
%We store this in matlab with X=ttm(G, {A,B,C})
core = tensor(rand(4,5,6), [4 5 6]);
U = {rand(7,4), rand(8,5), rand(2,6)};
X = ttensor(core, U);
%This can be converted into a full tensor like so:
%Note that it must be the case that the second dimension in each matrix
%agrees with the corresponding matrix. The first dimension determines the
%dimension of the resulting tensor. This is at least for 3-way tensors.

tensor(X)